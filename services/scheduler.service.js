const cron = require('node-cron');
const zaraService = require('./zara.service');
const config = require('../config/environment');

class SchedulerService {
    constructor() {
        this.jobs = new Map();
        this.isInitialized = false;
        this.isDevelopment = config.NODE_ENV === 'development';
    }

    /**
     * Scheduler'ƒ± ba≈ülat
     */
    async initialize() {
        if (this.isInitialized) {
            console.log('‚ö†Ô∏è  Scheduler zaten ba≈ülatƒ±lmƒ±≈ü');
            return;
        }

        console.log('üöÄ Scheduler ba≈ülatƒ±lƒ±yor...');
        
        // ƒ∞lk √ßalƒ±≈ütƒ±rmada verileri √ßek
        await this.runInitialDataFetch();
        
        // Periyodik g√∂revleri ba≈ülat
        this.startPeriodicTasks();
        
        this.isInitialized = true;
        console.log('‚úÖ Scheduler ba≈üarƒ±yla ba≈ülatƒ±ldƒ±');
    }

    /**
     * ƒ∞lk veri √ßekme i≈ülemi
     */
    async runInitialDataFetch() {
        // Development modunda otomatik fetch yapma
        if (this.isDevelopment && !config.FORCE_INITIAL_FETCH) {
            console.log('üîÑ Development modunda otomatik veri √ßekme devre dƒ±≈üƒ±');
            console.log('üí° Manuel fetch i√ßin: POST /api/products/refresh');
            return;
        }
        
        console.log('üì° ƒ∞lk veri √ßekme i≈ülemi ba≈ülatƒ±lƒ±yor...');
        
        try {
            // Zara cache kontrol√º
            const zaraCache = await zaraService.getCacheMetadata('zara_men_products');
            
            if (!zaraCache || this.isCacheExpired(zaraCache.next_update)) {
                console.log('üîÑ Zara verileri g√ºncel deƒüil, yeniden √ßekiliyor...');
                await zaraService.fetchAndSaveAllProducts();
            } else {
                console.log('‚úÖ Zara verileri g√ºncel');
            }
        } catch (error) {
            console.error('‚ùå ƒ∞lk veri √ßekme i≈üleminde hata:', error);
        }
    }

    /**
     * Periyodik g√∂revleri ba≈ülat
     */
    startPeriodicTasks() {
        // Development modunda periyodik g√∂revleri kontrol et
        if (this.isDevelopment && !config.ENABLE_PERIODIC_TASKS) {
            console.log('‚è∞ Development modunda periyodik g√∂revler devre dƒ±≈üƒ±');
            console.log('üí° Aktif etmek i√ßin: ENABLE_PERIODIC_TASKS=true');
            return;
        }

        // Her 45-60 dakika arasƒ±nda random cache kontrol√º yap
        const cacheCheckJob = cron.schedule('0 */1 * * *', async () => {
            // Random delay ekle (45-60 dakika arasƒ±)
            const randomDelay = Math.floor(Math.random() * (60 - 45 + 1)) + 45;
            const nextCheckTime = new Date(Date.now() + randomDelay * 60 * 1000);
            console.log(`‚è∞ Cache kontrol√º ${randomDelay} dakika sonra yapƒ±lacak...`);
            console.log(`üìÖ Bir sonraki kontrol: ${nextCheckTime.toLocaleString('tr-TR')}`);
            
            setTimeout(async () => {
                await this.checkAndUpdateCache();
            }, randomDelay * 60 * 1000);
        }, {
            scheduled: false,
            timezone: "Europe/Istanbul"
        });

        // Her gece 3:00'da full sync yap
        const dailySyncJob = cron.schedule('0 3 * * *', async () => {
            console.log('üåô G√ºnl√ºk tam senkronizasyon ba≈ülatƒ±lƒ±yor...');
            await zaraService.fetchAndSaveAllProducts();
        }, {
            scheduled: false,
            timezone: "Europe/Istanbul"
        });

        // G√∂revleri kaydet ve ba≈ülat
        this.jobs.set('cacheCheck', cacheCheckJob);
        this.jobs.set('dailySync', dailySyncJob);

        cacheCheckJob.start();
        dailySyncJob.start();

        console.log('‚è∞ Periyodik g√∂revler ba≈ülatƒ±ldƒ±:');
        console.log('   - Cache kontrol√º: Her 45-60 dakika arasƒ± random');
        console.log('   - G√ºnl√ºk sync: Her gece 03:00');
    }

    /**
     * Cache kontrol√º ve g√ºncelleme
     */
    async checkAndUpdateCache() {
        try {
            const zaraCache = await zaraService.getCacheMetadata('zara_men_products');
            
            if (!zaraCache) {
                console.log('üì° Cache bulunamadƒ±, ilk veri √ßekme i≈ülemi ba≈ülatƒ±lƒ±yor...');
                await zaraService.fetchAndSaveAllProducts();
                return;
            }

            if (this.isCacheExpired(zaraCache.next_update)) {
                console.log('üîÑ Cache s√ºresi dolmu≈ü, yeniden √ßekiliyor...');
                await zaraService.fetchAndSaveAllProducts();
            } else {
                const nextUpdate = new Date(zaraCache.next_update);
                const now = new Date();
                const minutesLeft = Math.ceil((nextUpdate - now) / (1000 * 60));
                console.log(`‚è≥ Cache g√ºncel, ${minutesLeft} dakika sonra g√ºncelleme`);
                console.log(`üìÖ Bir sonraki g√ºncelleme: ${nextUpdate.toLocaleString('tr-TR')}`);
            }
        } catch (error) {
            console.error('‚ùå Cache kontrol√ºnde hata:', error);
        }
    }

    /**
     * Cache'in s√ºresi dolmu≈ü mu kontrol et
     */
    isCacheExpired(nextUpdateTime) {
        if (!nextUpdateTime) return true;
        
        const nextUpdate = new Date(nextUpdateTime);
        const now = new Date();
        
        return now >= nextUpdate;
    }

    /**
     * Belirli bir g√∂revi durdur
     */
    stopJob(jobName) {
        const job = this.jobs.get(jobName);
        if (job) {
            job.stop();
            console.log(`‚èπÔ∏è  ${jobName} g√∂revi durduruldu`);
        }
    }

    /**
     * Belirli bir g√∂revi ba≈ülat
     */
    startJob(jobName) {
        const job = this.jobs.get(jobName);
        if (job) {
            job.start();
            console.log(`‚ñ∂Ô∏è  ${jobName} g√∂revi ba≈ülatƒ±ldƒ±`);
        }
    }

    /**
     * T√ºm g√∂revleri durdur
     */
    stopAll() {
        this.jobs.forEach((job, name) => {
            job.stop();
            console.log(`‚èπÔ∏è  ${name} g√∂revi durduruldu`);
        });
        
        this.isInitialized = false;
        console.log('üõë T√ºm scheduled g√∂revler durduruldu');
    }

    /**
     * Manuel veri √ßekme i≈ülemi tetikle
     */
    async triggerManualUpdate(brand = 'zara') {
        console.log(`üîÑ Manuel ${brand} g√ºncellemesi ba≈ülatƒ±lƒ±yor...`);
        
        try {
            if (brand === 'zara') {
                await zaraService.fetchAndSaveAllProducts();
                console.log('‚úÖ Manuel Zara g√ºncellemesi tamamlandƒ±');
                return true;
            } else {
                console.log(`‚ùå ${brand} markasƒ± hen√ºz desteklenmiyor`);
                return false;
            }
        } catch (error) {
            console.error(`‚ùå Manuel ${brand} g√ºncellemesinde hata:`, error);
            return false;
        }
    }

    /**
     * Scheduler durumunu al
     */
    getStatus() {
        const status = {
            isInitialized: this.isInitialized,
            activeJobs: [],
            totalJobs: this.jobs.size
        };

        this.jobs.forEach((job, name) => {
            status.activeJobs.push({
                name,
                running: job.running || false
            });
        });

        return status;
    }

    /**
     * Random delay ekle (rate limiting i√ßin)
     */
    getRandomDelay(min = 30000, max = 120000) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }
}

module.exports = new SchedulerService();
